primary_expression ::= ID | CONSTANT | STRING_LITERAL | "(" expression ")"
postfix_expression ::= primary_expression | postfix_expression "[" expression "]" | postfix_expression "(" ")" | postfix_expression "(" argument_expression_list ")" | postfix_expression "." ID | postfix_expression POINTER ID | postfix_expression INCR | postfix_expression DECR 
argument_expression_list ::= assignment_expression | argument_expression_list "," assignment_expression 
unary_expression ::= postfix_expression | INCR unary_expression | DECR unary_expression | unary_operator cast_expression | SIZEOF unary_expression | SIZEOF "(" type_name ")" 
unary_operator ::= "&" | "*" | "+" | "-" | "~" | "!"
cast_expression ::= unary_expression | "(" type_name ")" cast_expression
multiplicative_expression ::= cast_expression | multiplicative_expression "*" cast_expression | multiplicative_expression "/" cast_expression | multiplicative_expression "%" cast_expression 
additive_expression ::= multiplicative_expression | additive_expression "+" multiplicative_expression | additive_expression "-" multiplicative_expression 
shift_expression ::= additive_expression | shift_expression SHIFT_LEFT additive_expression | shift_expression SHIFT_RIGHT additive_expression 
relational_expression ::= shift_expression | relational_expression "<" shift_expression | relational_expression ">" shift_expression | relational_expression LE shift_expression | relational_expression GE shift_expression
equality_expression ::= relational_expression | equality_expression EQ relational_expression | equality_expression NE relational_expression 
and_expression ::= equality_expression | and_expression "&" equality_expression 
exclusive_or_expression ::= and_expression | exclusive_or_expression "^" and_expression 
inclusive_or_expression ::= exclusive_or_expression | inclusive_or_expression "|" exclusive_or_expression 
logical_and_expression ::= inclusive_or_expression | logical_and_expression AND inclusive_or_expression 
logical_or_expression ::= logical_and_expression | logical_or_expression OR logical_and_expression 
conditional_expression ::= logical_or_expression | logical_or_expression "?" expression ":" conditional_expression 
assignment_expression ::= conditional_expression | unary_expression assignment_operator assignment_expression
assignment_operator ::= "=" | ASSIGN_TIMES | ASSIGN_DIVIDE | ASSIGN_MOD | ASSIGN_PLUS | ASSIGN_MINUS | ASSIGN_LEFT | ASSIGN_RIGHT | ASSIGN_AND | ASSIGN_XOR | ASSIGN_OR 
expression ::= assignment_expression | assignment_expression ","
assignment_expression_list ::= assignment_expression delim
delim ::= ","
constant_expression ::= conditional_expression
declaration ::= declaration_specifiers ";" | declaration_specifiers init_declarator_list ";" 
declaration_specifiers ::= storage_class_specifier | storage_class_specifier declaration_specifiers | type_specifier | type_specifier declaration_specifiers | type_qualifier | type_qualifier declaration_specifiers
init_declarator_list ::= init_declarator
init_declarator ::= declarator | declarator "=" initializer
pre_kr_initializer ::= CONSTANT | expression
pre_kr_constant_expression_list ::= pre_kr_constant_expression | pre_kr_constant_expression "," pre_kr_constant_expression_list 
pre_kr_constant_expression ::= expression
pre_kr_constant_expression ::= expression "," assignment_expression
storage_class_specifier ::= TYPEDEF | EXTERN | STATIC | AUTO | REG
type_specifier ::= VOID | CHAR | SHORT | INT | LONG | FLOAT | DOUBLE | SIGNED | UNSIGNED | struct_or_union_specifier | enum_specifier | typedef_name 
struct_or_union_specifier ::= struct_or_union ID "{" struct_declaration_list "}" | struct_or_union "{" struct_declaration_list "}" | struct_or_union ID 
struct_or_union ::= STRUCT | UNION
struct_declaration_list ::= struct_declaration | struct_declaration_list struct_declaration 
struct_declaration ::= specifier_qualifier_list struct_declarator_list ";"
specifier_qualifier_list ::= type_specifier specifier_qualifier_list | type_specifier | type_qualifier specifier_qualifier_list | type_qualifier 
struct_declarator_list ::= struct_declarator | struct_declarator_list "," struct_declarator
struct_declarator ::= declarator | ":" constant_expression | declarator ":" constant_expression 
enum_specifier ::= ENUM "{" enumerator_list "}" | ENUM ID "{" enumerator_list "}" | ENUM ID 
enumerator_list ::= enumerator | enumerator_list "," enumerator
enumerator ::= ID | ID "=" constant_expression
type_qualifier ::= CONST | VOLATILE
declarator ::= pointer direct_declarator | direct_declarator 
direct_declarator ::= ID | "(" declarator ")" | direct_declarator "[" constant_expression "]" | direct_declarator "[" "]" | direct_declarator "(" parameter_type_list ")" | direct_declarator "(" identifier_list ")" | direct_declarator "(" ")" 
pointer ::= "*" | "*" type_qualifier_list | "*" pointer | "*" type_qualifier_list pointer 
type_qualifier_list ::= type_qualifier | type_qualifier_list type_qualifier
parameter_type_list ::= parameter_list | parameter_list "," ELLIPSIS
parameter_list ::= parameter_declaration | parameter_list "," parameter_declaration 
parameter_declaration ::= declaration_specifiers declarator | declaration_specifiers abstract_declarator | declaration_specifiers 
identifier_list ::= ID | identifier_list "," ID 
type_name ::= specifier_qualifier_list | specifier_qualifier_list abstract_declarator 
abstract_declarator ::= pointer | direct_abstract_declarator | pointer direct_abstract_declarator 
direct_abstract_declarator ::= "(" abstract_declarator ")" | "[" "]" | "[" constant_expression "]" | direct_abstract_declarator "[" "]" | direct_abstract_declarator "[" constant_expression "]" | "(" ")" | "(" parameter_type_list ")" | direct_abstract_declarator "(" ")" | direct_abstract_declarator "(" parameter_type_list ")" 
typedef_name ::= TYPE_NAME
initializer ::= assignment_expression | "{" initializer_list "}" | "{" initializer_list "," "}" 
initializer_list ::= initializer | initializer_list "," initializer 
statement ::= labeled_statement | compound_statement | expression_statement | selection_statement | iteration_statement | jump_statement 
labeled_statement ::= ID ":" statement | CASE constant_expression ":" statement | DEFAULT ":" statement 
compound_statement ::= "{" "}" | "{" statement_list "}" | "{" declaration_list "}" | "{" declaration_list statement_list "}" 
declaration_list ::= declaration | declaration_list declaration 
statement_list ::= statement | statement_list statement 
expression_statement ::= ";" | expression ";" 
selection_statement ::= IF "(" expression ")" statement %prec THEN | IF "(" expression ")" statement ELSE statement | SWITCH "(" expression ")" statement
iteration_statement ::= WHILE "(" expression ")" statement | DO statement WHILE "(" expression ")" ";" | FOR "(" expression_statement expression_statement ")" statement | FOR "(" expression_statement expression_statement expression ")" statement 
jump_statement ::= GOTO ID ";" | CONTINUE ";" | BREAK ";" | RETURN ";" | RETURN expression ";" 
translation_unit ::= external_declaration | translation_unit external_declaration 
external_declaration ::= function_definition | declaration 
function_definition ::= declaration_specifiers declarator declaration_list compound_statement | declaration_specifiers declarator compound_statement | declarator declaration_list compound_statement | declarator compound_statement 
