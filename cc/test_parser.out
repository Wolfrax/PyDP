Grammar:

Rule 0     S' -> translation_unit
Rule 1     translation_unit -> declaration
Rule 2     declaration -> type_specifier
Rule 3     type_specifier -> struct_or_union_specifier
Rule 4     type_specifier -> UNSIGNED
Rule 5     type_specifier -> SIGNED
Rule 6     type_specifier -> DOUBLE
Rule 7     type_specifier -> FLOAT
Rule 8     type_specifier -> LONG
Rule 9     type_specifier -> INT
Rule 10    type_specifier -> SHORT
Rule 11    type_specifier -> CHAR
Rule 12    type_specifier -> VOID
Rule 13    struct_or_union_specifier -> struct_or_union ID ID { struct_declaration_list }
Rule 14    struct_or_union -> UNION
Rule 15    struct_or_union -> STRUCT
Rule 16    struct_declaration_list -> struct_declaration_list struct_declaration
Rule 17    struct_declaration_list -> struct_declaration
Rule 18    struct_declarator_list -> struct_declarator_list , struct_declarator
Rule 19    struct_declarator_list -> struct_declarator
Rule 20    struct_declaration -> struct_declarator_list ;
Rule 21    struct_declarator -> declarator
Rule 22    declarator -> direct_declarator
Rule 23    direct_declarator -> direct_declarator [ ]
Rule 24    direct_declarator -> direct_declarator [ constant_expression ]
Rule 25    direct_declarator -> CONSTANT
Rule 26    direct_declarator -> ID
Rule 27    constant_expression -> CONSTANT
Rule 28    constant_expression -> ID

Unused terminals:

    ASSIGN_XOR
    TYPE_NAME
    ASSIGN_TIMES
    ASSIGN_LEFT
    CONTINUE
    ASSIGN_AND
    LE
    STRING_LITERAL
    BREAK
    OR
    TYPEDEF
    DO
    ASSIGN_MINUS
    ENUM
    GE
    ASSIGN_RIGHT
    IF
    SWITCH
    AND
    DEFAULT
    EQ
    GOTO
    WHILE
    ELSE
    ELLIPSIS
    POINTER
    SHIFT_LEFT
    REG
    AUTO
    ASSIGN_PLUS
    VOLATILE
    CONST
    SHIFT_RIGHT
    SIZEOF
    FOR
    ASSIGN_MOD
    STATIC
    NE
    INCR
    DECR
    EXTERN
    CASE
    ASSIGN_DIVIDE
    RETURN
    ASSIGN_OR

Terminals, with rules where they appear:

,                    : 18
;                    : 20
AND                  : 
ASSIGN_AND           : 
ASSIGN_DIVIDE        : 
ASSIGN_LEFT          : 
ASSIGN_MINUS         : 
ASSIGN_MOD           : 
ASSIGN_OR            : 
ASSIGN_PLUS          : 
ASSIGN_RIGHT         : 
ASSIGN_TIMES         : 
ASSIGN_XOR           : 
AUTO                 : 
BREAK                : 
CASE                 : 
CHAR                 : 11
CONST                : 
CONSTANT             : 25 27
CONTINUE             : 
DECR                 : 
DEFAULT              : 
DO                   : 
DOUBLE               : 6
ELLIPSIS             : 
ELSE                 : 
ENUM                 : 
EQ                   : 
EXTERN               : 
FLOAT                : 7
FOR                  : 
GE                   : 
GOTO                 : 
ID                   : 13 13 26 28
IF                   : 
INCR                 : 
INT                  : 9
LE                   : 
LONG                 : 8
NE                   : 
OR                   : 
POINTER              : 
REG                  : 
RETURN               : 
SHIFT_LEFT           : 
SHIFT_RIGHT          : 
SHORT                : 10
SIGNED               : 5
SIZEOF               : 
STATIC               : 
STRING_LITERAL       : 
STRUCT               : 15
SWITCH               : 
TYPEDEF              : 
TYPE_NAME            : 
UNION                : 14
UNSIGNED             : 4
VOID                 : 12
VOLATILE             : 
WHILE                : 
[                    : 23 24
]                    : 23 24
error                : 
{                    : 13
}                    : 13

Nonterminals, with rules where they appear:

constant_expression  : 24
declaration          : 1
declarator           : 21
direct_declarator    : 22 23 24
struct_declaration   : 16 17
struct_declaration_list : 13 16
struct_declarator    : 18 19
struct_declarator_list : 18 20
struct_or_union      : 13
struct_or_union_specifier : 3
translation_unit     : 0
type_specifier       : 2


state 0

    (0) S' -> . translation_unit
    (1) translation_unit -> . declaration
    (2) declaration -> . type_specifier
    (3) type_specifier -> . struct_or_union_specifier
    (4) type_specifier -> . UNSIGNED
    (5) type_specifier -> . SIGNED
    (6) type_specifier -> . DOUBLE
    (7) type_specifier -> . FLOAT
    (8) type_specifier -> . LONG
    (9) type_specifier -> . INT
    (10) type_specifier -> . SHORT
    (11) type_specifier -> . CHAR
    (12) type_specifier -> . VOID
    (13) struct_or_union_specifier -> . struct_or_union ID ID { struct_declaration_list }
    (14) struct_or_union -> . UNION
    (15) struct_or_union -> . STRUCT
    UNSIGNED        shift and go to state 5
    SIGNED          shift and go to state 6
    DOUBLE          shift and go to state 7
    FLOAT           shift and go to state 8
    LONG            shift and go to state 9
    INT             shift and go to state 10
    SHORT           shift and go to state 11
    CHAR            shift and go to state 12
    VOID            shift and go to state 13
    UNION           shift and go to state 15
    STRUCT          shift and go to state 16

    translation_unit               shift and go to state 1
    declaration                    shift and go to state 2
    type_specifier                 shift and go to state 3
    struct_or_union_specifier      shift and go to state 4
    struct_or_union                shift and go to state 14

state 1

    (0) S' -> translation_unit .


state 2

    (1) translation_unit -> declaration .
    $end            reduce using rule 1 (translation_unit -> declaration .)


state 3

    (2) declaration -> type_specifier .
    $end            reduce using rule 2 (declaration -> type_specifier .)


state 4

    (3) type_specifier -> struct_or_union_specifier .
    $end            reduce using rule 3 (type_specifier -> struct_or_union_specifier .)


state 5

    (4) type_specifier -> UNSIGNED .
    $end            reduce using rule 4 (type_specifier -> UNSIGNED .)


state 6

    (5) type_specifier -> SIGNED .
    $end            reduce using rule 5 (type_specifier -> SIGNED .)


state 7

    (6) type_specifier -> DOUBLE .
    $end            reduce using rule 6 (type_specifier -> DOUBLE .)


state 8

    (7) type_specifier -> FLOAT .
    $end            reduce using rule 7 (type_specifier -> FLOAT .)


state 9

    (8) type_specifier -> LONG .
    $end            reduce using rule 8 (type_specifier -> LONG .)


state 10

    (9) type_specifier -> INT .
    $end            reduce using rule 9 (type_specifier -> INT .)


state 11

    (10) type_specifier -> SHORT .
    $end            reduce using rule 10 (type_specifier -> SHORT .)


state 12

    (11) type_specifier -> CHAR .
    $end            reduce using rule 11 (type_specifier -> CHAR .)


state 13

    (12) type_specifier -> VOID .
    $end            reduce using rule 12 (type_specifier -> VOID .)


state 14

    (13) struct_or_union_specifier -> struct_or_union . ID ID { struct_declaration_list }
    ID              shift and go to state 17


state 15

    (14) struct_or_union -> UNION .
    ID              reduce using rule 14 (struct_or_union -> UNION .)


state 16

    (15) struct_or_union -> STRUCT .
    ID              reduce using rule 15 (struct_or_union -> STRUCT .)


state 17

    (13) struct_or_union_specifier -> struct_or_union ID . ID { struct_declaration_list }
    ID              shift and go to state 18


state 18

    (13) struct_or_union_specifier -> struct_or_union ID ID . { struct_declaration_list }
    {               shift and go to state 19


state 19

    (13) struct_or_union_specifier -> struct_or_union ID ID { . struct_declaration_list }
    (16) struct_declaration_list -> . struct_declaration_list struct_declaration
    (17) struct_declaration_list -> . struct_declaration
    (20) struct_declaration -> . struct_declarator_list ;
    (18) struct_declarator_list -> . struct_declarator_list , struct_declarator
    (19) struct_declarator_list -> . struct_declarator
    (21) struct_declarator -> . declarator
    (22) declarator -> . direct_declarator
    (23) direct_declarator -> . direct_declarator [ ]
    (24) direct_declarator -> . direct_declarator [ constant_expression ]
    (25) direct_declarator -> . CONSTANT
    (26) direct_declarator -> . ID
    CONSTANT        shift and go to state 27
    ID              shift and go to state 20

    struct_declaration_list        shift and go to state 21
    struct_declaration             shift and go to state 22
    struct_declarator_list         shift and go to state 23
    struct_declarator              shift and go to state 24
    declarator                     shift and go to state 25
    direct_declarator              shift and go to state 26

state 20

    (26) direct_declarator -> ID .
    [               reduce using rule 26 (direct_declarator -> ID .)
    ;               reduce using rule 26 (direct_declarator -> ID .)
    ,               reduce using rule 26 (direct_declarator -> ID .)


state 21

    (13) struct_or_union_specifier -> struct_or_union ID ID { struct_declaration_list . }
    (16) struct_declaration_list -> struct_declaration_list . struct_declaration
    (20) struct_declaration -> . struct_declarator_list ;
    (18) struct_declarator_list -> . struct_declarator_list , struct_declarator
    (19) struct_declarator_list -> . struct_declarator
    (21) struct_declarator -> . declarator
    (22) declarator -> . direct_declarator
    (23) direct_declarator -> . direct_declarator [ ]
    (24) direct_declarator -> . direct_declarator [ constant_expression ]
    (25) direct_declarator -> . CONSTANT
    (26) direct_declarator -> . ID
    }               shift and go to state 28
    CONSTANT        shift and go to state 27
    ID              shift and go to state 20

    struct_declaration             shift and go to state 29
    struct_declarator_list         shift and go to state 23
    struct_declarator              shift and go to state 24
    declarator                     shift and go to state 25
    direct_declarator              shift and go to state 26

state 22

    (17) struct_declaration_list -> struct_declaration .
    }               reduce using rule 17 (struct_declaration_list -> struct_declaration .)
    CONSTANT        reduce using rule 17 (struct_declaration_list -> struct_declaration .)
    ID              reduce using rule 17 (struct_declaration_list -> struct_declaration .)


state 23

    (20) struct_declaration -> struct_declarator_list . ;
    (18) struct_declarator_list -> struct_declarator_list . , struct_declarator
    ;               shift and go to state 30
    ,               shift and go to state 31


state 24

    (19) struct_declarator_list -> struct_declarator .
    ;               reduce using rule 19 (struct_declarator_list -> struct_declarator .)
    ,               reduce using rule 19 (struct_declarator_list -> struct_declarator .)


state 25

    (21) struct_declarator -> declarator .
    ;               reduce using rule 21 (struct_declarator -> declarator .)
    ,               reduce using rule 21 (struct_declarator -> declarator .)


state 26

    (22) declarator -> direct_declarator .
    (23) direct_declarator -> direct_declarator . [ ]
    (24) direct_declarator -> direct_declarator . [ constant_expression ]
    ;               reduce using rule 22 (declarator -> direct_declarator .)
    ,               reduce using rule 22 (declarator -> direct_declarator .)
    [               shift and go to state 32


state 27

    (25) direct_declarator -> CONSTANT .
    [               reduce using rule 25 (direct_declarator -> CONSTANT .)
    ;               reduce using rule 25 (direct_declarator -> CONSTANT .)
    ,               reduce using rule 25 (direct_declarator -> CONSTANT .)


state 28

    (13) struct_or_union_specifier -> struct_or_union ID ID { struct_declaration_list } .
    $end            reduce using rule 13 (struct_or_union_specifier -> struct_or_union ID ID { struct_declaration_list } .)


state 29

    (16) struct_declaration_list -> struct_declaration_list struct_declaration .
    }               reduce using rule 16 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    CONSTANT        reduce using rule 16 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    ID              reduce using rule 16 (struct_declaration_list -> struct_declaration_list struct_declaration .)


state 30

    (20) struct_declaration -> struct_declarator_list ; .
    }               reduce using rule 20 (struct_declaration -> struct_declarator_list ; .)
    CONSTANT        reduce using rule 20 (struct_declaration -> struct_declarator_list ; .)
    ID              reduce using rule 20 (struct_declaration -> struct_declarator_list ; .)


state 31

    (18) struct_declarator_list -> struct_declarator_list , . struct_declarator
    (21) struct_declarator -> . declarator
    (22) declarator -> . direct_declarator
    (23) direct_declarator -> . direct_declarator [ ]
    (24) direct_declarator -> . direct_declarator [ constant_expression ]
    (25) direct_declarator -> . CONSTANT
    (26) direct_declarator -> . ID
    CONSTANT        shift and go to state 27
    ID              shift and go to state 20

    struct_declarator              shift and go to state 33
    declarator                     shift and go to state 25
    direct_declarator              shift and go to state 26

state 32

    (23) direct_declarator -> direct_declarator [ . ]
    (24) direct_declarator -> direct_declarator [ . constant_expression ]
    (27) constant_expression -> . CONSTANT
    (28) constant_expression -> . ID
    ]               shift and go to state 34
    CONSTANT        shift and go to state 36
    ID              shift and go to state 37

    constant_expression            shift and go to state 35

state 33

    (18) struct_declarator_list -> struct_declarator_list , struct_declarator .
    ;               reduce using rule 18 (struct_declarator_list -> struct_declarator_list , struct_declarator .)
    ,               reduce using rule 18 (struct_declarator_list -> struct_declarator_list , struct_declarator .)


state 34

    (23) direct_declarator -> direct_declarator [ ] .
    [               reduce using rule 23 (direct_declarator -> direct_declarator [ ] .)
    ;               reduce using rule 23 (direct_declarator -> direct_declarator [ ] .)
    ,               reduce using rule 23 (direct_declarator -> direct_declarator [ ] .)


state 35

    (24) direct_declarator -> direct_declarator [ constant_expression . ]
    ]               shift and go to state 38


state 36

    (27) constant_expression -> CONSTANT .
    ]               reduce using rule 27 (constant_expression -> CONSTANT .)


state 37

    (28) constant_expression -> ID .
    ]               reduce using rule 28 (constant_expression -> ID .)


state 38

    (24) direct_declarator -> direct_declarator [ constant_expression ] .
    [               reduce using rule 24 (direct_declarator -> direct_declarator [ constant_expression ] .)
    ;               reduce using rule 24 (direct_declarator -> direct_declarator [ constant_expression ] .)
    ,               reduce using rule 24 (direct_declarator -> direct_declarator [ constant_expression ] .)
