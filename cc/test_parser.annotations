Grammar v1
==========

translation_unit ::= declaration
declaration ::= type_specifier
type_specifier ::= VOID | CHAR | SHORT | INT | LONG | FLOAT | DOUBLE | SIGNED | UNSIGNED | struct_or_union_specifier
struct_or_union_specifier ::= struct_or_union ID ID "{" struct_declaration_list "}"
struct_or_union ::= STRUCT | UNION
struct_declaration_list ::= struct_declaration | struct_declaration_list struct_declaration
struct_declarator_list ::= struct_declarator | struct_declarator_list "," struct_declarator
struct_declaration ::= struct_declarator_list ";"
struct_declarator ::= declarator
declarator ::= direct_declarator
direct_declarator ::= ID | CONSTANT | direct_declarator "[" constant_expression "]" | direct_declarator "[" "]"
constant_expression ::= ID | CONSTANT

============

struct tname funcblk { NAME, 0 };

Lexer output
    Token(type='STRUCT', value='struct')
    Token(type='ID', value='tname')
    Token(type='ID', value='funcblk')
    Token(type='{', value='{')
    Token(type='ID', value='NAME')
    Token(type=',', value=',')
    Token(type='CONSTANT', value=0)
    Token(type='}', value='}')
    Token(type=';', value=';')

=> STRUCT ID ID "{" ID "," CONSTANT "}" ";"

Parser output (production \n symstack)
struct_or_union -> STRUCT  (action step 2)
  [$end, Token(type='STRUCT', value='struct')]
direct_declarator -> ID (action step 7)
  [$end, struct_or_union, Token(type='ID', value='tname'), Token(type='ID', value='funcblk'), Token(type='{', value='{'), Token(type='ID', value='NAME')]
declarator -> direct_declarator (action step 8)
  [$end, struct_or_union, Token(type='ID', value='tname'), Token(type='ID', value='funcblk'), Token(type='{', value='{'), direct_declarator]
struct_declarator -> declarator (action step 9)
  [$end, struct_or_union, Token(type='ID', value='tname'), Token(type='ID', value='funcblk'), Token(type='{', value='{'), declarator]
struct_declarator_list -> struct_declarator (action step 12)
  [$end, struct_or_union, Token(type='ID', value='tname'), Token(type='ID', value='funcblk'), Token(type='{', value='{'), struct_declarator]

*** ERROR ***

Syntax error at [1:31] @token } = }
	Production: struct_declarator_list -> struct_declarator
	symstack is:
	$end
	struct_or_union
	Token(type='ID', value='tname', lineno=1, index=7, end=12)
	Token(type='ID', value='funcblk', lineno=1, index=13, end=20)
	Token(type='{', value='{', lineno=1, index=21, end=22)
	struct_declarator_list
	Token(type=',', value=',', lineno=1, index=27, end=28)
	Token(type='CONSTANT', value=0, lineno=1, index=29, end=30)
None

Lexer tokens
. STRUCT ID ID "{" ID "," CONSTANT "}" ";"

1. State 0
- Shift (STRUCT) and go to state 16
=> STRUCT . ID ID "{" ID "," CONSTANT "}" ";"

2. State 16
- Reduce using rule 15 (struct_or_union -> STRUCT .)
=> struct_or_union . ID ID "{" ID "," CONSTANT "}" ";"
- Next state 14, match: struct_or_union . ID

3. State 14
- Shift (ID) and go to state 17
=> struct_or_union ID . ID "{" ID "," CONSTANT "}" ";"

4. State 17
- shift (ID) and go to state 18
=> struct_or_union ID ID . "{" ID "," CONSTANT "}" ";"

5. State 18
- shift ("{") and go to state 19
=> struct_or_union ID ID "{" . ID "," CONSTANT "}" ";"

6. State 19
- shift (ID) and go to state 20
=> struct_or_union ID ID "{" ID . "," CONSTANT "}" ";"

7. State 20
- reduce using rule 26 (direct_declarator -> ID .)
=> struct_or_union ID ID "{" direct_declarator . "," CONSTANT "}" ";
- Next state 26, match rule 22: declarator -> direct_declarator .

8. State 26
- reduce using rule 22 (declarator -> direct_declarator .)
=> struct_or_union ID ID "{" declarator . "," CONSTANT "}" ";
- Next state 25, match rule 21: struct_declarator -> declarator .

9. State 25
- reduce using rule 21 (struct_declarator -> declarator .)
=> struct_or_union ID ID "{" struct_declarator . "," CONSTANT "}" ";
- Next state 24, match rule 19: struct_declarator_list -> struct_declarator .

10. State 24
- reduce using rule 19 (struct_declarator_list -> struct_declarator .)
=> struct_or_union ID ID "{" struct_declarator_list . "," CONSTANT "}" ";
- Next state 23, match rule 18: struct_declarator_list -> struct_declarator_list . , struct_declarator

11. State 23
- shift (",") and go to state 31
=> struct_or_union ID ID "{" struct_declarator_list "," . CONSTANT "}" ";

12. State 31
- shift (CONSTANT) and go to state 27
=> struct_or_union ID ID "{" struct_declarator_list "," CONSTANT . "}" ";

13. State 27
- ERROR, unexpected token "}", expected "[", ";", ","

Step Symbol Stack                                                   Input Tokens                                 Action
---- ---------------------                                          -----------------------------------------    -----------------------------------------
1                                                                   STRUCT ID ID "{" ID "," CONSTANT "}" ";"$    Shift STRUCT
2    STRUCT                                                         ID ID "{" ID "," CONSTANT "}" ";"$           Reduce struct_or_union ::= STRUCT | UNION
3    struct_or_union                                                ID ID "{" ID "," CONSTANT "}" ";"$           Shift ID
4    struct_or_union ID                                             ID "{" ID "," CONSTANT "}" ";"$              Shift ID
5    struct_or_union ID ID                                          "{" ID "," CONSTANT "}" ";"$                 Shift "{"
6    struct_or_union ID ID "{"                                      ID "," CONSTANT "}" ";"$                     Shift ID
7    struct_or_union ID ID "{" ID                                   "," CONSTANT "}" ";"$                        Reduce direct_declarator ::= ID
8    struct_or_union ID ID "{" direct_declarator                    "," CONSTANT "}" ";"$                        Reduce declarator ::= direct_declarator
9    struct_or_union ID ID "{" declarator                           "," CONSTANT "}" ";"$                        Reduce struct_declarator ::= declarator
10   struct_or_union ID ID "{" struct_declarator                    "," CONSTANT "}" ";"$                        Reduce struct_declarator_list ::= struct_declarator
11   struct_or_union ID ID "{" struct_declarator_list               "," CONSTANT "}" ";"$                        Shift ","
12   struct_or_union ID ID "{" struct_declarator_list ","           CONSTANT "}" ";"$                            Shift CONSTANT
13   struct_or_union ID ID "{" struct_declarator_list "," CONSTANT  "}" ";"$                                     ERROR, unexpected token "}", expected "[", ";", ","

Grammar v1
==========

translation_unit ::= declaration
declaration ::= type_specifier
type_specifier ::= VOID | CHAR | SHORT | INT | LONG | FLOAT | DOUBLE | SIGNED | UNSIGNED | struct_or_union_specifier
struct_or_union_specifier ::= struct_or_union ID ID "{" struct_declaration_list "}"
struct_or_union ::= STRUCT | UNION
struct_declaration_list ::= struct_declaration | struct_declaration_list struct_declaration
struct_declarator_list ::= struct_declarator | struct_declarator_list "," struct_declarator
struct_declaration ::= struct_declarator_list ";"
struct_declarator ::= declarator
declarator ::= direct_declarator
direct_declarator ::= ID | CONSTANT | direct_declarator "[" constant_expression "]" | direct_declarator "[" "]"
constant_expression ::= ID | CONSTANT

============

Grammar v2
==========

struct tname funcblk { NAME, 0 };
    struct tname -> type_specifier -> struct_specifier -> STRUCT ID
    funcblk -> variable -> ID
    { NAME, 0 } -> initializer -> "{" initializer_list "}"
    initializer_list -> expression | initializer_list "," expression
    expression -> ID | CONSTANT


translation_unit ::= type_specifier ";"
type_specifier ::= VOID | CHAR | SHORT | INT | LONG | FLOAT | DOUBLE | SIGNED | UNSIGNED | struct_specifier
struct_specifier ::= STRUCT ID variable initializer
variable ::= ID
initializer ::= "{" initializer_list "}"
initializer_list ::= expression | initializer_list "," expression
expression ::= ID | CONSTANT

ID "{" struct_declaration_list "}"
struct_declaration_list ::= struct_declaration | struct_declaration_list struct_declaration
struct_declarator_list ::= struct_declarator | struct_declarator_list "," struct_declarator
struct_declaration ::= struct_declarator_list ";"
struct_declarator ::= declarator
declarator ::= direct_declarator
direct_declarator ::= ID | CONSTANT | direct_declarator "[" constant_expression "]" | direct_declarator "[" "]"
constant_expression ::= ID | CONSTANT

============
