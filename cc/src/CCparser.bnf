1: empty ::= 

2: primary_expression ::= ID | CONSTANT | STRING_LITERAL | "(" expression ")"

3: postfix_expression ::= primary_expression | postfix_expression "[" expression "]" | postfix_expression "(" ")" | postfix_expression "(" argument_expression_list ")" | postfix_expression "." ID | postfix_expression POINTER ID | postfix_expression INCR | postfix_expression DECR

4: postfix_expression_subscript ::= postfix_expression "[" expression "]"

5: postfix_expression_function_call ::= postfix_expression "(" ")" | postfix_expression "(" argument_expression_list ")"

6: postfix_expression_member_of_structure ::= postfix_expression "." ID | postfix_expression POINTER ID

7: postfix_expression_incr_decr ::= postfix_expression INCR | postfix_expression DECR

8: postfix_expression ::= primary_expression | postfix_expression_subscript | postfix_expression_function_call | postfix_expression_member_of_structure | postfix_expression_incr_decr

9: argument_expression_list ::= assignment_expression | argument_expression_list "," assignment_expression

10: unary_expression ::= postfix_expression | INCR unary_expression | DECR unary_expression | unary_operator unary_expression | SIZEOF unary_expression | SIZEOF "(" type_name ")"

11: unary_operator ::= "&" | "*" | "+" | "-" | "~" | "!"

12: multiplicative_expression ::= unary_expression | multiplicative_expression "*" unary_expression | multiplicative_expression "/" unary_expression | multiplicative_expression "%" unary_expression

13: additive_expression ::= multiplicative_expression | additive_expression "+" multiplicative_expression | additive_expression "-" multiplicative_expression

14: shift_expression ::= additive_expression | shift_expression SHIFT_LEFT additive_expression | shift_expression SHIFT_RIGHT additive_expression

15: relational_expression ::= shift_expression | relational_expression "<" shift_expression | relational_expression ">" shift_expression | relational_expression LE shift_expression | relational_expression GE shift_expression

16: equality_expression ::= relational_expression | equality_expression EQ relational_expression | equality_expression NE relational_expression

17: and_expression ::= equality_expression | and_expression "&" equality_expression

18: exclusive_or_expression ::= and_expression | exclusive_or_expression "^" and_expression

19: inclusive_or_expression ::= exclusive_or_expression | inclusive_or_expression "|" exclusive_or_expression

20: logical_and_expression ::= inclusive_or_expression | logical_and_expression AND inclusive_or_expression

21: logical_or_expression ::= logical_and_expression | logical_or_expression OR logical_and_expression

22: conditional_expression ::= logical_or_expression | logical_or_expression "?" expression ":" conditional_expression

23: assignment_expression ::= conditional_expression | unary_expression assignment_operator assignment_expression

24: assignment_operator ::= "=" | ASSIGN_TIMES | ASSIGN_DIVIDE | ASSIGN_MOD | ASSIGN_PLUS | ASSIGN_MINUS | ASSIGN_LEFT | ASSIGN_RIGHT | ASSIGN_AND | ASSIGN_XOR | ASSIGN_OR

25: expression ::= assignment_expression

26: constant_expression ::= conditional_expression

27: declaration ::= declaration_specifiers ";" | declaration_specifiers init_declarator_list ";"

28: declaration_specifiers ::= storage_class_specifier | storage_class_specifier type_specifier | type_specifier | type_specifier storage_class_specifier

29: declaration_specifiers_storage_class ::= storage_class_specifier | storage_class_specifier type_specifier

30: declaration_specifiers_type_specifier ::= type_specifier | type_specifier storage_class_specifier

31: declaration_specifiers ::= declaration_specifiers_storage_class | declaration_specifiers_type_specifier

32: init_declarator_list ::= init_declarator | init_declarator_list "," init_declarator

33: init_declarator ::= declarator | declarator initializer

34: initializer ::= CONSTANT | "-" CONSTANT | "{" constant_expression_list "}"

35: constant_expression_list ::= constant_init_expression | constant_expression_list "," constant_init_expression

36: constant_init_expression ::= expression | empty

37: storage_class_specifier ::= EXTERN | STATIC | AUTO | REG

38: type_specifier ::= CHAR | INT | FLOAT | DOUBLE | struct_specifier

39: struct_specifier ::= STRUCT ID "{" struct_declaration_list "}" | STRUCT "{" struct_declaration_list "}" | STRUCT ID

40: struct_declaration_list ::= struct_declaration | struct_declaration_list struct_declaration

41: struct_declaration ::= specifier_qualifier_list struct_declarator_list ";"

42: specifier_qualifier_list ::= type_specifier | specifier_qualifier_list type_specifier

43: struct_declarator_list ::= declarator | struct_declarator_list "," declarator

44: declarator ::= pointer direct_declarator | direct_declarator

45: direct_declarator ::= ID | "(" declarator ")" | direct_declarator "[" constant_expression "]" | direct_declarator "[" "]" | direct_declarator "(" identifier_list ")" | direct_declarator "(" ")"

46: direct_declarator_ID ::= ID | "(" declarator ")"

47: direct_declarator_array ::= direct_declarator "[" constant_expression "]" | direct_declarator "[" "]"

48: direct_declarator_function ::= direct_declarator "(" identifier_list ")" | direct_declarator "(" ")"

49: direct_declarator ::= direct_declarator_ID | direct_declarator_array | direct_declarator_function

50: pointer ::= "*" | "*" pointer

51: identifier_list ::= ID | identifier_list "," ID

52: type_name ::= specifier_qualifier_list | specifier_qualifier_list pointer

53: statement ::= labeled_statement | compound_statement | expression_statement | selection_statement | iteration_statement | jump_statement

54: labeled_statement ::= ID ":" statement | CASE constant_expression ":" statement | DEFAULT ":" statement

55: compound_statement ::= "{" statement_list "}" | "{" declaration_list "}" | "{" declaration_list statement_list "}"

56: compound_statement_statement_list ::= "{" statement_list "}"

57: compound_statement_declaration_list ::= "{" declaration_list "}"

58: compound_statement_declaration_list_statement_list ::= "{" declaration_list statement_list "}"

59: compound_statement ::= compound_statement_statement_list | compound_statement_declaration_list | compound_statement_declaration_list_statement_list

60: declaration_list ::= declaration | declaration_list declaration

61: statement_list ::= statement | statement_list statement

62: expression_statement ::= ";" | expression ";"

63: selection_statement ::= IF "(" expression ")" statement %prec THEN | IF "(" expression ")" statement ELSE statement | SWITCH "(" expression ")" statement

64: selection_statement_if_then_else ::= IF "(" expression ")" statement %prec THEN | IF "(" expression ")" statement ELSE statement

65: selection_statement_switch ::= SWITCH "(" expression ")" statement

66: selection_statement ::= selection_statement_if_then_else | selection_statement_switch

67: iteration_statement ::= WHILE "(" expression ")" statement | DO statement WHILE "(" expression ")" ";" | FOR "(" expression_statement expression_statement ")" statement | FOR "(" expression_statement expression_statement expression ")" statement

68: iteration_statement_while ::= WHILE "(" expression ")" statement | DO statement WHILE "(" expression ")" ";"

69: iteration_statement_for ::= FOR "(" expression_statement expression_statement ")" statement | FOR "(" expression_statement expression_statement expression ")" statement

70: iteration_statement ::= iteration_statement_while | iteration_statement_for

71: jump_statement ::= GOTO ID ";" | CONTINUE ";" | BREAK ";" | RETURN ";" | RETURN expression ";"

72: translation_unit ::= external_declaration | translation_unit external_declaration

73: external_declaration ::= function_definition | declaration

74: function_definition ::= declaration_specifiers declarator declaration_list compound_statement | declaration_specifiers declarator compound_statement | declarator declaration_list compound_statement | declarator compound_statement

75: function_definition_declaration_specifiers ::= declaration_specifiers declarator declaration_list compound_statement | declaration_specifiers declarator compound_statement

76: function_definition_declarator ::= declarator declaration_list compound_statement | declarator compound_statement

77: function_definition ::= function_definition_declaration_specifiers | function_definition_declarator

